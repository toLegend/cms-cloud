<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"><generatorConfiguration>    <!-- properties用来引入属性外部文件，比如引入数据库信息 -->    <properties resource="application.yml"/>    <!-- context用来指定一组对象生成的环境，例如要连接的数据库，    要生成数据库的类型和要处理的数据库中的表 -->    <context id="testTables" targetRuntime="MyBatis3"             defaultModelType="flat">        <!-- MySQL的分隔符 -->        <property name="beginningDelimiter" value="'"/>        <property name="endingDelimiter" value="'"/>        <!--Lombok插件-->        <plugin type="org.mybatis.generator.plugins.LombokPlugin" >            <property name="hasLombok" value="true"/>        </plugin>        <!-- 来配置如何生成注释信息 -->        <commentGenerator>            <!-- 阻止生成注释，默认为false -->            <property name="suppressAllComments" value="true" />            <!-- 是否添加数据库表的备注信息，默认为false -->            <property name="addRemarkComments" value="true"/>        </commentGenerator>        <!-- jdbcConnection：数据库连接的信息 -->        <jdbcConnection driverClass="${spring.datasource.driver-class-name}"                        connectionURL="${spring.datasource.url}"                        userId="${spring.datasource.username}"                        password="${spring.datasource.password}">        </jdbcConnection>        <!-- javaTypeResolver:指定JDBC类型和Java类型的转换 -->        <javaTypeResolver>            <!--forceBigDecimals：是否将Decimal和NUMERIC类型转换            为Java类型的java.math.decimal  -->            <property name="forceBigDecimals" value="false" />        </javaTypeResolver>        <!-- javaModelGenerator：用来控制生成实体类 -->        <!-- targetPackage：生成存放实体类的包名 -->        <!-- targetProject：指定目标项目路径-->        <javaModelGenerator targetPackage="${pojoTargetPackage}"                            targetProject="${targetProject}">            <!-- 默认为false,使用 targetPackage指定的包 -->            <property name="enableSubPackages" value="false" />            <!-- trimStrings：是否对数据库的查询结果进行trim操作，默认false -->            <property name="trimStrings" value="true" />        </javaModelGenerator>        <!-- sqlMapGenerator:配置SQL映射生成器(mapper.xml) -->        <sqlMapGenerator targetPackage="${xmlTargetPackage}"                         targetProject="${xmltargetProject}">            <!-- enableSubPackages:是否让schema作为包的后缀 -->            <property name="enableSubPackages" value="false" />        </sqlMapGenerator>        <!-- javaClientGenerator：配置生成的mapper接口 -->        <!-- type="XMLMAPPER" 所有的方法都在XMl中            推荐使用，接口和XML完全分离，接口中不出现SQL语句，            修改SQL不需要重新编译 -->        <javaClientGenerator type="XMLMAPPER"                             targetPackage="${mapperTargetPackage}"                             targetProject="${targetProject}">            <property name="enableSubPackages" value="false" />        </javaClientGenerator>        <!-- 指定数据库表，只有在table中配置的表，才能经过上面配置生成最终的代码 -->        <!-- tableName：表名 -->        <!-- 生成全部的表   tableName="%" -->        <!-- domainObjectName：生成的实体类名，没有指定，则根据表名来生成 -->        <table tableName="book" domainObjectName="Book">            <!-- generatedKey：用来指定生成的主键            会在Insert语句中添加 selectKey标签 -->                <generatedKey column="id" sqlStatement="MySql"/>        </table>    </context></generatorConfiguration>